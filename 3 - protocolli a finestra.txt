Detti a finestra perchè si basano su una finestra di trasmissione.
Sono molto utilizzati per effettuare un trasferimento affidabile, infatti forniscono meccanismi per recupero degli errori, controllo di flusso e di sequenza.

Per proteggersi dagli errori di trasmissione (che accadono con una probabilità da 10^-12 a 10^-3) si usano le codifiche di canale, ovvero informazioni ridondanti per rilevare e correggere gli errori.
Bit di parità: riconosce errori in numero dispari, non rilevo errori se in numero pari. Non posso correggere errori.
Codice a ripetizione: trasmetto più volte ogni bit e poi "a maggioranza" si decide se è stato commesso un errore o meno e correggerlo.
Parità di riga e colonna:posso correggere errori singoli e rilevare errori doppi. Per ogni riga e colonna viene calcolato un bit di parità in fase di trasmissione, in fase di ricezione si controlla per ogni riga e colonna che la parità sia rispettata, altrimenti correggo.
I bit di parità vengono usati nei checksum all'interno della PCI, può essere calcolato usando Internet Checksum (sommando) o in maniera più solida con CRC (Cyclic Redundancy Check). 
A seconda di quanti bit di parità uso posso utilizzare tecniche diverse:
Molti bit di parità: Forward Error Correction (FEC), correggo gli errori in ricezione senza chiedere la ritrasmissione;
Pochi bit di parità: Automatic Retransmission/Repeat reQuest (ARQ), rilevo gli errori e permetto al ricevitore di chiedere la ritrasmissione della PDU.

ARQ
Per effettuare anche il controllo di flusso, sequenza ed errori, si introducono bit di numerazione oltre a quelli di parità.
Le tre tecniche principali sono:
Stop and wait, Go back N e Selective Repeat.

	STOP AND WAIT
Il trasmettitore, dopo aver fatto una copia, invia una PDU e attiva un timeout mettendosi in attesa di conferma (ACK). Se il timeout scade invia nuovamente la PDU e riattiva il timer.
Un ricevitore, una volta ricevuta una PDU, controlla che sia corretta e invia una conferma di ricezione, controlla che sia in sequenza e la consegna ai livelli superiori, altrimenti la PDU viene scartata e inviato l'ACK relativo alla PDU che ci si aspetta.
Quando un trasmettitore riceve un ACK controlla che sia corretto e in sequenza. In caso affermativo arresta il timer e abilita l'invio della PDU successiva, altrimenti l'ACK viene ignorato.
La numerazione delle PDU è ciclica e sui canali non sequenziali può avvenire perdita di pacchetti o stalli => si deve usare un numero di bit abbastanza elevato. Numerazione con k bit implica numerazione modulo 2^k. 
L'efficienza di stop and wait è molto bassa in quanto la trasmissione è lenta.
EFFICIENZA = \eta = \frac{T_{TX}}{T_{TX} + RTT}}

Se il timeout non ha un valore adeguato:
Se timeout < RTT si ritrasmette un pacchetto due volte.
Se timeout è molto lungo rischio di non reagire subito ad una perdita.
Il valore ottimale sarebbe 2*RTT.

	GO BACK N
Miglioramento di Stop and wait inviando più PDU prima di fermarsi ad aspettare la conferma. Si ha il concetto di finestra di trasmissione W_T, ovvero quante PDU possono essere inviate prima di ricevere conferma. La finestra rappresenta anche il numero massimo di PDU di uno stesso trasmettitore contemporaneamente nella rete.
La finestra di ricezione rappresenta quante PDU possono essere accettate dal ricevitore e memorizzate; nel caso di Go Back N W_R = 1.
Funzionamento:

- Il trasmettitore invia W_T PDU dopo averne fatto una copia, attiva un solo orologio settato dall'ultima PDU inviata e si mette in attesa. Per ogni ACK ricevuto correttamente fa scorrere in avanti la finestra di trasmissione di tanti posti quanti sono i pacchetti confermati. (Non sposta di 1 per ogni ACK ricevuto perchè alcuni ACK potrebbero andare persi ma potrebbero essere ricevuti quelli relativi a due PDU successive, allora la finestra si sposta di 2+ack persi).
Se scade il timeout prima di aver confermato la PDU che aveva settato l'orologio, si ritrasmettono tutte le PDU non ancora confermate.

- Il ricevitore per ogni PDU, controlla che sia corretta e invia la conferma di ricezione, controlla che sia in sequenza (primo numero di sequenza non ancora ricevuto) e la consegna ai livelli superiori.

	SEMANTICA DEGLI ACK
Gli ACK possono essere: 
- Cumulativi, confermano tutte le PDU con numero di sequenza minore del numero di sequenza indicato, ovvero indicano al trasmettitore quale numero di sequenza ci si aspetta;
- Selettivi, confermano la PDU con numero di sequenza indicato, non dando informazioni su pacchetti precedenti o successivi;
- Negativi, specificano la mancata ricezione della PDU con numero di sequenza indicato, ovvero si chiede di ritrasmettere una certa PDU.
Spesso si fa "Piggybacking", ovvero si mandano ACK e dati insieme per risparmiare ACK, ma questi ultimi viaggiano in ritardo.
Il trasmettitore è ovviamente più complesso di Stop and wait in quanto si deve gestire la finestra, una memorizzazione diversa e una gestione diversa dell'orologio. La finestra di ricezione deve avere dimensioni specifiche: W_T < 2^k


	SELECTIVE REPEAT
Se al protocollo go back n aggiungo la possibilità di memorizzare PDU non in sequenza aumento l'efficienza e ho il protocollo Selective Repeat.
In questo caso viene aumentata la finestra di ricezione. Caso di ACK cumulativi e timer associati alla finestra:
Funzionamento: 
Il trasmettitore si comporta esattamente come go back n, trasmette wt pdu dopo averle copiate, fa partire l'orologio e aspetta, per ogni ACK fa avanzare la finestra di quanti pacchetti sono stati confermati.
Il ricevitore alla ricezione controlla correttezza e numero di sequenza. Se la PDU è corretta e in sequenza la invia al livello superiore, se corretta ma non in sequenza:
Se in finestra la memorizza, se non in finestra la scarta. Viene comunque inviato un ACK relativo all'ultima PDU ricevuta in sequenza. (Ovvero se ci sono buchi all'inizio della finestra di ricezione non può scorrere e viene inviato un ACK relativo al primo "buco". Quando i buchi vengono riempiti si può scorrere.)
Vale la relazione W_T + W_R <= 2^k


	EFFICIENZA
Efficienza \eta = \frac{T_{TX}}{T_{TX} + 2t_p}.
t_p = tempo di propagazione => 2*t_p = Round trip time.
Se divido al numeratore e al denominatore per T_{TX} ottengo \eta = \frac{1}{1+2a} con a=\frac{t_p}{T_{TX}}. 
L'efficienza del protocollo stop and wait è sempre minore di 1.
L'efficienza del selettive repeat è uguale a quella del go back n ed è:
- uguale a 1 se (W_T = finestra di trasmissione) W_T >= 1+2a perchè vuol dire che ricevo gli ACK mentre sto ancora trasmettendo, allora trasmetto in continuazione;
- \frac{W_T}{1+2a} se W_T< 1+2a.

Il throughput \theta= \eta C con C=capacità del canale. Se \eta \simeq 1, allora il throughput (traffico smaltito) è molto vicino alla capacità del canale. 
Inoltre il throughput è:
- Direttamente proporzionale alla finestra di trasmissione W_T, difatti TCP utilizza questo parametro per regolare la velocità di trasmissione (Controllo di congestione).
- Inversamente proporzionale al RTT, infatti a parità di W_T, a minore RTT corrisponde un throughput maggiore perchè la finestra avanza più velocemente.
